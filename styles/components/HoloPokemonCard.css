/* Styles pour la carte Pokémon avec effet holographique. */

.holo-card-container-wrapper {
  /* Ce wrapper centre la carte et lui donne un peu d'espace autour. */
  padding: 0.5rem;
  display: flex;
  justify-content: center;
  align-items: center;
  /* Pour plus tard : gérer la responsivité si la carte doit s'adapter à la grille. */
  /* Par exemple : width: 100%; max-width: ${cardWidth}px; */
}

.holo-card-perspective-container {
  /* Crée l'effet de perspective 3D pour la carte. */
  perspective: 1000px;
  /* Note : ajuster si besoin pour la responsivité. */
}

.holo-card-element {
  width: 240px; /* Dimensions fixes pour l'instant. */
  height: 336px; /* À revoir si on veut une carte responsive. */
  border-radius: 15px;
  transform-style: preserve-3d; /* Essentiel pour les transformations 3D des enfants. */
  will-change: transform; /* Optimisation pour les animations de transformation. */
  transition: transform 0.05s ease-out, box-shadow 0.2s ease-out;
  position: relative;
  overflow: hidden; /* Cache les parties des effets qui dépassent. */
  box-shadow: 0px 8px 16px -4px rgba(0, 0, 0, 0.3);
  transform: rotateY(var(--ry)) rotateX(var(--rx)) scale(var(--s)); /* Rotation et échelle via variables CSS. */
  background-color: #2d3748; /* Fond de base de la carte. */
}

.holo-card-element.interacting {
  /* Style quand on interagit avec la carte (survol). */
  box-shadow: 0px 15px 30px -5px rgba(0, 0, 0, 0.5), 0 0 12px 2px var(--glow),
    0 0 24px 4px var(--glow, #69d1e980); /* Ombre plus prononcée et effet de lueur. */
}

.holo-card-content {
  width: 100%;
  height: 100%;
  position: relative;
  transform-style: preserve-3d; /* Pour que les enfants (image, infos) puissent être en 3D. */
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  border-radius: inherit; /* Hérite du border-radius du parent. */
}

.holo-card-image-container {
  width: 100%;
  height: 70%; /* L'image occupe 70% de la hauteur. */
  position: relative; /* Nécessaire pour positionner les overlays. */
  overflow: hidden;
  border-top-left-radius: inherit;
  border-top-right-radius: inherit;
  background-color: #4a5568; /* Fond si l'image est transparente ou charge. */
  transform-style: preserve-3d; /* Permet aux enfants (image, overlays) d'être en 3D. */
}

.holo-card-image-container img {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: contain; /* Assure que l'image est bien proportionnée. */
  border-top-left-radius: inherit;
  border-top-right-radius: inherit;
  transform: translateZ(20px); /* Petit décalage 3D pour l'image. */
}

/* Styles pour les overlays (brillance, reflet) sur l'image. */
/* Ils sont positionnés DANS le conteneur d'image. */
.holo-card-image-container .holo-card-shine-overlay,
.holo-card-image-container .holo-card-glare-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%; /* S'adapte à la taille du conteneur d'image. */
  height: 100%;
  border-top-left-radius: inherit;
  border-top-right-radius: inherit;
  /* Pas de coins arrondis en bas, car l'image n'en a pas forcément. */
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;

  pointer-events: none; /* Pour que la souris passe "à travers". */
  z-index: 1; /* Au-dessus de l'image, mais sous d'autres éléments si besoin. */
  opacity: var(--o); /* Opacité contrôlée par JS. */
  transition: opacity 0.2s ease-out;
  transform: translateZ(10px); /* Léger décalage 3D pour les overlays. */
}

.holo-card-image-container .holo-card-shine-overlay {
  /* Effet de "paillettes" arc-en-ciel. */
  --space: 2px; /* Espacement des lignes de couleur. */
  --h: 21; /* Teinte de base pour le calcul des couleurs. */
  --s-hsl: 70%; /* Saturation. */
  --l-hsl: 50%; /* Luminosité. */

  clip-path: inset(
    0
  ); /* S'assure que l'effet ne dépasse pas le conteneur d'image. */

  /* Dégradé complexe pour simuler l'effet holographique. */
  background-image: repeating-linear-gradient(
      90deg,
      hsl(calc(var(--h) * 0), var(--s-hsl), var(--l-hsl)) calc(var(--space) * 0),
      hsl(calc(var(--h) * 0), var(--s-hsl), var(--l-hsl)) calc(var(--space) * 1),
      transparent calc(var(--space) * 1.001),
      transparent calc(var(--space) * 1.999),
      hsl(calc(var(--h) * 1), var(--s-hsl), var(--l-hsl)) calc(var(--space) * 2),
      hsl(calc(var(--h) * 1), var(--s-hsl), var(--l-hsl)) calc(var(--space) * 3),
      transparent calc(var(--space) * 3.001),
      transparent calc(var(--space) * 3.999),
      hsl(calc(var(--h) * 2), var(--s-hsl), var(--l-hsl)) calc(var(--space) * 4),
      hsl(calc(var(--h) * 2), var(--s-hsl), var(--l-hsl)) calc(var(--space) * 5),
      transparent calc(var(--space) * 5.001),
      transparent calc(var(--space) * 5.999),
      hsl(calc(var(--h) * 3), var(--s-hsl), var(--l-hsl)) calc(var(--space) * 6),
      hsl(calc(var(--h) * 3), var(--s-hsl), var(--l-hsl)) calc(var(--space) * 7),
      transparent calc(var(--space) * 7.001),
      transparent calc(var(--space) * 7.999),
      hsl(calc(var(--h) * 4), var(--s-hsl), var(--l-hsl)) calc(var(--space) * 8),
      hsl(calc(var(--h) * 4), var(--s-hsl), var(--l-hsl)) calc(var(--space) * 9),
      transparent calc(var(--space) * 9.001),
      transparent calc(var(--space) * 9.999),
      hsl(calc(var(--h) * 5), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 10),
      hsl(calc(var(--h) * 5), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 11),
      transparent calc(var(--space) * 11.001),
      transparent calc(var(--space) * 11.999),
      hsl(calc(var(--h) * 6), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 12),
      hsl(calc(var(--h) * 6), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 13),
      transparent calc(var(--space) * 13.001),
      transparent calc(var(--space) * 13.999),
      hsl(calc(var(--h) * 7), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 14),
      hsl(calc(var(--h) * 7), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 15),
      transparent calc(var(--space) * 15.001),
      transparent calc(var(--space) * 15.999),
      hsl(calc(var(--h) * 8), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 16),
      hsl(calc(var(--h) * 8), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 17),
      transparent calc(var(--space) * 17.001),
      transparent calc(var(--space) * 17.999),
      hsl(calc(var(--h) * 9), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 18),
      hsl(calc(var(--h) * 9), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 19),
      transparent calc(var(--space) * 19.001),
      transparent calc(var(--space) * 19.999),
      hsl(calc(var(--h) * 10), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 20),
      hsl(calc(var(--h) * 10), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 21),
      transparent calc(var(--space) * 21.001),
      transparent calc(var(--space) * 21.999),
      hsl(calc(var(--h) * 11), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 22),
      hsl(calc(var(--h) * 11), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 23),
      transparent calc(var(--space) * 23.001),
      transparent calc(var(--space) * 23.999),
      hsl(calc(var(--h) * 12), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 24),
      hsl(calc(var(--h) * 12), var(--s-hsl), var(--l-hsl))
        calc(var(--space) * 25)
    ),
    radial-gradient(
      /* Effet de lumière blanche diffuse. */ farthest-corner circle at
        var(--mx) var(--my),
      rgba(255, 255, 255, 0.8) 0%,
      rgba(255, 255, 255, 0.3) 30%,
      rgba(0, 0, 0, 0.3) 90%
    );
  background-blend-mode: overlay, overlay; /* Mélange les dégradés. */
  /* Position et taille des fonds, contrôlés par JS via variables CSS. */
  background-position: center, var(--posx) var(--posy);
  background-size: 100% 100%, 220% 220%;
  filter: brightness(calc((var(--hyp) + 0.8) * 0.8)) contrast(1.8) saturate(1.2); /* Ajuste l'éclat et les couleurs. */
  mix-blend-mode: color-dodge; /* Mode de fusion pour l'effet lumineux. */
}

.holo-card-image-container .holo-card-glare-overlay {
  /* Simule un reflet de lumière plus direct. */
  background-image: radial-gradient(
    farthest-corner circle at var(--mx) var(--my),
    /* Position du reflet suit la souris (via JS). */ rgba(255, 255, 255, 0.5)
      5%,
    rgba(255, 255, 255, 0.2) 20%,
    rgba(0, 0, 0, 0.6) 130%
  );
  mix-blend-mode: overlay;
  opacity: calc(
    var(--o) * (var(--hyp) + 0.2)
  ); /* Opacité varie avec l'interaction. */
}

.holo-card-info {
  /* Zone d'informations en bas de la carte. */
  padding: 0.75rem;
  text-align: center;
  width: 100%;
  background-color: rgba(23, 37, 64, 0.85); /* Fond semi-transparent. */
  border-bottom-left-radius: inherit;
  border-bottom-right-radius: inherit;
  color: #f7fafc;
  margin-top: auto; /* Se place en bas. */
  z-index: 2; /* Au-dessus des effets d'image si jamais. */
  position: relative; /* Pour le translateZ. */
  transform: translateZ(5px); /* Petit effet 3D pour les infos. */
}

.holo-pokemon-name {
  font-family: "Poppins", sans-serif;
  font-weight: 600;
  font-size: 1.1rem;
  margin-bottom: 0.1rem;
  color: #edf2f7;
}

.holo-pokemon-number {
  font-family: "Roboto Mono", monospace;
  font-size: 0.8rem;
  color: #a0aec0;
  margin-bottom: 0.3rem;
}

.holo-pokemon-types {
  display: flex;
  justify-content: center;
  gap: 0.4rem; /* Espace entre les badges de type. */
}
